{"version":3,"sources":["webpack:///./client/components/CreatePlantModal/index.tsx","webpack:///./client/components/Habitat/get-plant-tile-data.tsx","webpack:///./client/components/Habitat/index.tsx","webpack:///./client/components/common/back-button.tsx","webpack:///./client/store/plant/actions.ts","webpack:///./client/store/plant/index.ts","webpack:///./client/store/plant/types.ts"],"names":[],"mappings":"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","file":"./public/5.bundle.js","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {validatorGetters} from \"../../forms/validation\";\nimport {entityId} from \"../../../common/db-interfaces/types\";\nimport CreateModal, {IStage} from \"../common/CreateModal\";\nimport {FieldTypes} from \"../../forms/interfaces\";\nimport {actions as plantActions} from '../../store/plant';\nimport {IAugmentedPlant} from \"../../store/habitat/selectors\";\n\nconst timeOptions = [\n    { value: 2, label: 'two days' },\n    { value: 3, label: 'three days' },\n    { value: 4, label: 'four days' },\n    { value: 5, label: 'five days' },\n    { value: 6, label: 'six days' },\n    { value: 7, label: 'seven days' },\n    { value: 8, label: 'eight days' },\n    { value: 9, label: 'nine days' },\n    { value: 10, label: 'ten days' },\n    { value: 14, label: 'two weeks' },\n    { value: 21, label: 'three weeks' },\n    { value: 30, label: 'one month' },\n];\n\nconst waterIntervalOptions = [{ value: 1, label: 'everyday' }].concat(\n    timeOptions.map(option => ({ value: option.value, label: `every ${option.label}` })),\n);\nconst lastWateredOptions = [\n    { value: 0, label: 'today' },\n    { value: 1, label: 'yesterday' },\n].concat(\n    timeOptions.map(option => ({ value: option.value, label: `${option.label} ago` })),\n);\n\n\nconst millisecondsInADay = 1000 * 60 * 60 * 24;\nconst convertDaysAgoToDate = (daysAgo: number) =>\n    new Date(new Date().getTime() - (daysAgo * millisecondsInADay)).toUTCString();\n\nconst getStages = (augmentedPlant?: IAugmentedPlant): IStage[] => {\n    const {\n        plant = {\n            // if there is no plant (i.e. we are creating oe for the first time, set default values)\n            name: '',\n            imageUrl: '/plant-avatars/plant1.png',\n            waterInterval: waterIntervalOptions[0].value,\n        },\n        subscribed = true,\n    } = (augmentedPlant || {});\n\n    return [\n        {\n            fields: [\n                {\n                    key: 'subscribed',\n                    label: 'do you want to subscribe to this plant?',\n                    type: FieldTypes.TOGGLE,\n                    validators: [],\n                    initial: subscribed,\n                },\n                {\n                    key: 'name',\n                    label: \"what is this plant's name?\",\n                    validators: [\n                        validatorGetters.isNotNil(),\n                        validatorGetters.isAtLeastLength(3),\n                        validatorGetters.isAtMostLength(20),\n                        validatorGetters.isOfGenericAllowedCharacters(),\n                    ],\n                    type: FieldTypes.INPUT,\n                    initial: plant.name,\n                    lowerCase: true,\n                },\n            ],\n        },\n        {\n            fields: [\n                {\n                    key: 'waterInterval',\n                    label: 'how often should you water it?',\n                    validators: [],\n                    type: FieldTypes.DROPDOWN,\n                    options: waterIntervalOptions,\n                    initial: plant.waterInterval,\n                },\n                ...(augmentedPlant ? []  : [{\n                    key: 'lastWatered',\n                    label: 'how long ago did you last water it?',\n                    validators: [],\n                    type: FieldTypes.DROPDOWN,\n                    options: lastWateredOptions,\n                    initial: 0,\n                }]),\n                {\n                    key: 'imageUrl',\n                    label: 'pick an avatar for this plant.',\n                    validators: [],\n                    type: FieldTypes.AVATAR,\n                    imageUrls: [\n                        '/plant-avatars/plant1.png',\n                        '/plant-avatars/plant2.png',\n                        '/plant-avatars/plant3.png',\n                        '/plant-avatars/plant4.png',\n                        '/plant-avatars/plant5.png',\n                        '/plant-avatars/plant6.png',\n                        '/plant-avatars/plant7.png',\n                        '/plant-avatars/plant8.png',\n                    ],\n                    initial: plant.imageUrl,\n                },\n            ],\n        },\n    ];\n};\n\ninterface IProps {\n    isCreate: boolean;\n    onCancel: () => any;\n    create: (toCreate: object, callback?: any) => any;\n    update: (toUpdate: object, callback?: any) => any;\n    afterSave: () => any;\n    habitatId: entityId;\n    augmentedPlant?: IAugmentedPlant;\n}\n\nconst Component = (props: IProps) => {\n    return (\n      <CreateModal\n          stages={getStages(props.augmentedPlant)}\n          close={props.onCancel}\n          save={\n              props.isCreate\n                  ? (toCreate, callback) => {\n                    props.create({\n                        ...toCreate,\n                        lastWatered: convertDaysAgoToDate(toCreate.lastWatered),\n                        waterInterval: +toCreate.waterInterval,\n                    }, callback);\n                  } : (updates, callback) => {\n                    // if this is an update, we know the augmentedPlant prop will exist\n                    const { plant: existingPlant } = props.augmentedPlant as IAugmentedPlant;\n                    props.update({\n                        ...updates,\n                        id: existingPlant.id,\n                    }, callback);\n                  }\n          }\n          afterSave={props.afterSave}\n          submitButtonText={props.isCreate ? 'create' : 'update'}\n      />\n    );\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    create: (plantData, callback) => dispatch(\n        plantActions.createOne({ ...plantData, habitatId: ownProps.habitatId }, callback),\n    ),\n    update: (plantData, callback) => dispatch(\n        plantActions.updateOne(plantData, callback),\n    ),\n});\n\nexport default connect(null, mapDispatchToProps)(Component);","import {IAugmentedPlant} from \"../../store/habitat/selectors\";\nimport {ITileProps} from \"../TileDisplay/tile\";\nimport {ITagProps} from \"../TileDisplay/tag\";\nimport {plantDataAccessors} from \"../../../common/data-accessors/plant\";\nimport {COLORS} from \"../style-config\";\n\ninterface IProps extends IAugmentedPlant {\n    openSettings: () => any;\n    justWatered: boolean;\n    onReachEndOfWaveTransition: () => any;\n}\n\nexport default (props: IProps): ITileProps => {\n    const { plant, subscribed, daysOverdueForWater, onReachEndOfWaveTransition } = props;\n    let tags: ITagProps[] = [];\n    let details = '';\n    let title = plant.name;\n    let hasSettings = true;\n    let isWaterablePlant = true;\n    let imageUrl = plant.imageUrl;\n    let containerStyle = {};\n\n    if (props.justWatered) {\n        title = 'Watered!';\n        hasSettings = false;\n        isWaterablePlant = false;\n        imageUrl = '/check_circle.png';\n        containerStyle = { border: `1px solid ${COLORS.fadedPrimaryGreen}` };\n    } else {\n        tags = [\n            ...(daysOverdueForWater > 0\n                    ? [\n                        {\n                            text: 'needs water',\n                            backgroundColor: COLORS.notification,\n                            color: COLORS.white,\n                            elementKey: `${plant.id}-needs-water`,\n                        }]\n                    : []\n            ),\n            ...(subscribed\n                    ? []\n                    : [{\n                        text: 'not subscribed',\n                        backgroundColor: COLORS.darkGray,\n                        color: COLORS.white,\n                        elementKey: `${plant.id}-not-subscribed`,\n                    }]\n            ),\n        ];\n        const numOfDaysSinceWatered = plantDataAccessors.daysSinceWatered(plant);\n        const lastWateredVerbage = numOfDaysSinceWatered === 0\n            ? `today`\n            : `${numOfDaysSinceWatered} days ago`;\n        details = `Last watered ${lastWateredVerbage}`;\n    }\n\n\n    return {\n        elementKey: plant.id,\n        title,\n        details,\n        imageUrl,\n        isWaterablePlant,\n        hasSettings,\n        openSettings: props.openSettings,\n        tags,\n        onReachEndOfWaveTransition,\n        containerStyle,\n    };\n};","import React, {useEffect, useState} from 'react';\nimport { connect } from 'react-redux';\nimport {actions as habitatActions, selectors as habitatSelectors} from \"../../store/habitat\";\nimport {IAugmentedPlant} from \"../../store/habitat/selectors\";\nimport {entityId} from \"../../../common/db-interfaces/types\";\nimport {actions as plantActions} from \"../../store/plant\";\nimport TilesContainer from '../TileDisplay';\nimport {Container, Title, TitleAndBackContainer} from \"./styled-components\";\nimport AddTile from \"../common/AddTile\";\nimport getPlantTileData from './get-plant-tile-data';\nimport PlantModal from \"../CreatePlantModal\";\nimport BackButton from '../common/back-button';\n\n\ninterface IProps {\n    match: any;\n    history: any;\n    name: string;\n    plantData: IAugmentedPlant[];\n    fetchHabitat: (habitatId: entityId) => void;\n    waterPlantsByIds: (plantIds: any[], callback?) => any;\n}\n\nconst Habitat = (props: IProps) => {\n    const habitatId = +props.match.params.id;\n    const { name, plantData, fetchHabitat, waterPlantsByIds } = props;\n\n    useEffect(() => {\n        fetchHabitat(habitatId);\n    }, []);\n\n    const [createPlantOpen, setCreatePlantOpen] = useState(false);\n    const [plantWithSettingsOpen, setPlantWithSettingsOpen] = useState(null);\n    const [justWateredPlantId, setJustWateredPlantId] = useState(0);\n\n    const onCreatePlant = () => {\n        setCreatePlantOpen(false);\n        props.fetchHabitat(habitatId);\n    };\n    const onUpdatePlant = () => {\n        setPlantWithSettingsOpen(null);\n        props.fetchHabitat(habitatId);\n    };\n    const waterPlant = plantId => {\n        waterPlantsByIds([plantId], () => {\n           setJustWateredPlantId(plantId);\n           setTimeout(() => {\n               setJustWateredPlantId(0);\n               props.fetchHabitat(habitatId);\n           }, 2000);\n        });\n    };\n    return (\n      <div>\n          {\n              createPlantOpen\n                  ? <PlantModal\n                        isCreate\n                        habitatId={habitatId}\n                        afterSave={onCreatePlant}\n                        onCancel={() => setCreatePlantOpen(false)}\n                    />\n                  : null\n          }\n          {\n              plantWithSettingsOpen\n                  ? <PlantModal\n                        isCreate={false}\n                        habitatId={habitatId}\n                        augmentedPlant={\n                          props.plantData.find(augmentedPlant => augmentedPlant.plant.id === plantWithSettingsOpen)\n                        }\n                        afterSave={onUpdatePlant}\n                        onCancel={() => setPlantWithSettingsOpen( null)}\n                    />\n                  : null\n          }\n        <Container>\n            <TitleAndBackContainer>\n                <BackButton onClick={() => props.history.goBack()}/>\n                <Title>@{name}</Title>\n            </TitleAndBackContainer>\n            <AddTile message=\"Add a plant\" onClick={() => setCreatePlantOpen(true)}/>\n            <TilesContainer tiles={\n                plantData.map(\n                    augmentedPlant => getPlantTileData({\n                        ...augmentedPlant,\n                        // @ts-ignore\n                        openSettings: () => setPlantWithSettingsOpen(augmentedPlant.plant.id),\n                        justWatered: augmentedPlant.plant.id === justWateredPlantId,\n                        onReachEndOfWaveTransition: () => waterPlant(augmentedPlant.plant.id),\n                    }),\n                )\n            }/>\n        </Container>\n      </div>\n    );\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    name: habitatSelectors.habitatById(state, ownProps).name,\n    plantData: habitatSelectors.getPlantDataForDisplayInHabitat(state, ownProps),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    fetchHabitat: (habitatId: entityId) => dispatch(habitatActions.fetchHabitatsByIds([habitatId])),\n    waterPlantsByIds: (plantIds, callback?) => dispatch(plantActions.waterByIds(plantIds, callback)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Habitat);","import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport {COLORS} from \"../style-config\";\n\nconst StyledSvg = styled.svg`\n    cursor: pointer;\n`;\n\ninterface IProps {\n    onClick: () => any;\n}\n\nexport default (props: IProps) => {\n    const [isHover, setIsHover] = useState(false);\n\n    return (\n        <StyledSvg\n            onMouseOver={() => setIsHover(true)}\n            onMouseLeave={() => setIsHover(false)}\n            onClick={props.onClick}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"45\"\n            height=\"45\"\n            viewBox=\"0 0 25 25\"\n            fill=\"none\"\n        >\n            <g id=\"arrow_back_24px\">\n                <path\n                    id=\"icon/navigation/arrow_back_24px\"\n                    d=\"M20 11H7.83L13.42 5.41L12 4L4 12L12 20L13.41 18.59L7.83 13H20V11Z\"\n                    fill={isHover ? COLORS.primaryGreen : COLORS.darkGray}\n                    fillOpacity=\"1\"\n                />\n            </g>\n        </StyledSvg>\n    );\n};","import {entityId} from \"../../../common/db-interfaces/types\";\nimport TYPES from './types';\n\nexport function waterByIds(plantIds: entityId[], callback?: () => any) {\n  return { type: TYPES.PLANTS_WATER_BY_IDS_REQUESTED, ids: plantIds, callback };\n}\n\nexport function createOne(plant: object, callback?: () => any) {\n  return { type: TYPES.PLANTS_CREATE_ONE_REQUESTED, plant, callback };\n}\n\nexport function updateOne(plant: object, callback?: () => any) {\n  return { type: TYPES.PLANTS_UPDATE_ONE_REQUESTED, plant, callback };\n}","import {waterByIds, createOne, updateOne} from \"./actions\";\n\nconst actions = {waterByIds, createOne, updateOne};\nexport {actions};","enum types {\n  PLANTS_WATER_BY_IDS_REQUESTED = 'PLANTS/WATER_BY_IDS_REQUESTED',\n  PLANTS_CREATE_ONE_REQUESTED = 'PLANTS/CREATE_ONE_REQUESTED',\n  PLANTS_UPDATE_ONE_REQUESTED = 'PLANTS/UPDATE_ONE_REQUESTED',\n}\n\nexport default types;"],"sourceRoot":""}