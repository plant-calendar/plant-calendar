{"version":3,"sources":["webpack:///./client/api/habitat.ts","webpack:///./client/api/index.ts","webpack:///./client/api/plant.ts","webpack:///./client/api/user.ts","webpack:///./client/store/auth/sagas.ts","webpack:///./client/store/habitat/sagas.ts","webpack:///./client/store/plant/sagas.ts","webpack:///./client/store/plant/types.ts","webpack:///./client/store/saga.ts","webpack:///./client/store/user/sagas.ts"],"names":[],"mappings":"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","file":"./public/4.bundle.js","sourcesContent":["import {entityId} from \"../../common/db-interfaces/types\";\nimport {gql} from \"apollo-boost\";\n\nexport default client => ({\n    getByIds: {\n        request: async (habitatIds: entityId[]) => client.query({\n            query: gql`\n                query GetHabitats($habitatIds: [Int]!) {\n                  getHabitats(id: $habitatIds) {\n                    id\n                    name\n                    imageUrl\n                    plants {\n                      id\n                      name\n                      habitatId\n                      imageUrl\n                      lastWatered\n                      waterInterval\n                      createdAt\n                      updatedAt\n                    }\n                    plantSubscriptions\n                  }\n                }\n            `,\n            variables: { habitatIds }, // todo... there should be token here, right???\n            fetchPolicy: 'no-cache',\n        }),\n        response: res => res.data.getHabitats,\n    },\n    getUserSubscribed: {\n        request: async userId => client.query({\n            query: gql`\n                query GetUserSubscribedHabitats($id: Int!) {\n                    getUserSubscribedHabitats(id: $id) {\n                        id\n                        name\n                        imageUrl\n                        plants {\n                            id\n                            name\n                            habitatId\n                            imageUrl\n                            lastWatered\n                            waterInterval\n                            createdAt\n                            updatedAt\n                        }\n                        plantSubscriptions\n                        subscription {\n                            id\n                            userId\n                            habitatId\n                            status\n                        }\n                    }\n                }\n            `,\n            variables: { id: userId },\n            fetchPolicy: 'no-cache',\n        }),\n        response: res => res.data.getUserSubscribedHabitats,\n    },\n    createOne: {\n        request: async ({ name, imageUrl }) => client.mutate({\n            mutation: gql`\n                mutation CreateHabitat($name: String!, $imageUrl: String!) {\n                    createHabitat(name: $name, imageUrl: $imageUrl) {\n                        id\n                        name\n                        imageUrl\n                        plants {\n                          id\n                          name\n                          habitatId\n                          imageUrl\n                          lastWatered\n                          waterInterval\n                          createdAt\n                          updatedAt\n                        }\n                        plantSubscriptions\n                    }\n                }\n            `,\n            variables: { name, imageUrl },\n        }),\n        response: res => res.data.createHabitat,\n    },\n    nameSearch: {\n      request: async (searchedString: string) => client.query({\n        query: gql`\n            query HabitatSearch($name: String!) {\n                searchHabitats(name: $name) {\n                    id\n                    name\n                    imageUrl\n                }\n            }\n        `,\n        variables: { name: searchedString },\n        fetchPolicy: 'no-cache',\n      }),\n      response: res => res.data.searchHabitats,\n    },\n    requestSubscription: {\n        request: async (habitatId: entityId) => client.mutate({\n            mutation: gql`\n                mutation RequestSubscriptionToHabitat($habitatId: Int!) {\n                    requestSubscriptionToHabitat(habitatId: $habitatId)\n                }\n            `,\n            variables: { habitatId },\n        }),\n        response: res => res.data.requestSubscriptionToHabitat,\n    },\n});","import ApolloClient from 'apollo-boost';\nimport userApi from './user';\nimport habitatApi from './habitat';\nimport plantApi from './plant';\nimport axios from 'axios';\n\n// by default uses the /graphql endpoint on the server you are on\n// can optionally provide uri param if that is not the endpoint you want\nconst client = new ApolloClient({});\n\nexport const apiHabitat = habitatApi(client);\nexport const apiPlant = plantApi(client);\nexport const apiUser = userApi(client);\nexport const haveCorrectUser = async url => axios.get('/auth/have-correct-user', { params: { url }});","import {entityId} from \"../../common/db-interfaces/types\";\nimport {gql} from \"apollo-boost\";\nimport {IPlant} from \"../../common/db-interfaces/plant.interface\";\n\nexport default client => ({\n    waterByIds: {\n        request: async (ids: entityId[]) => client.mutate({\n            mutation: gql`\n                mutation WaterPlantsByIds($ids: [Int]!) {\n                    waterPlantsByIds(ids: $ids)\n                }\n            `,\n            variables: { ids },\n        }),\n        response: res => res.data.waterPlantsByIds,\n    },\n    createOne: {\n        request: async (plant: IPlant) => client.mutate({\n            mutation: gql`\n                mutation CreatePlant($name: String!, $lastWatered: String!, $waterInterval: Int!, $habitatId: Int!, $imageUrl: String!, $subscribed: Boolean!) {\n                  createPlant(name: $name, lastWatered: $lastWatered, waterInterval: $waterInterval, habitatId: $habitatId, imageUrl: $imageUrl, subscribed: $subscribed) {\n                    id\n                    name\n                    habitatId\n                    lastWatered\n                    waterInterval\n                    imageUrl\n                  }\n                }\n              `,\n            variables: {\n                name: plant.name,\n                lastWatered: plant.lastWatered,\n                waterInterval: plant.waterInterval,\n                habitatId: plant.habitatId,\n                imageUrl: plant.imageUrl,\n                // @ts-ignore - we have added this property on create and update only\n                subscribed: plant.subscribed,\n            },\n        }),\n        response: res => res.data.createPlant,\n    },\n    updateOne: {\n        request: async (plant: IPlant) => client.mutate({\n            mutation: gql`\n                mutation UpdatePlant($id: Int!, $name: String, $lastWatered: String, $waterInterval: Int, $habitatId: Int, $imageUrl: String, $subscribed: Boolean) {\n                  updatePlant(id: $id, name: $name, lastWatered: $lastWatered, waterInterval: $waterInterval, habitatId: $habitatId, imageUrl: $imageUrl, subscribed: $subscribed) {\n                    id\n                    name\n                    habitatId\n                    lastWatered\n                    waterInterval\n                    imageUrl\n                  }\n                }\n              `,\n            variables: {\n                id: plant.id,\n                name: plant.name,\n                lastWatered: plant.lastWatered,\n                waterInterval: plant.waterInterval,\n                habitatId: plant.habitatId,\n                imageUrl: plant.imageUrl,\n                // @ts-ignore - we have added this property on create and update only\n                subscribed: plant.subscribed,\n            },\n        }),\n        response: res => res.data.updatePlant,\n    },\n});","import {entityId} from \"../../common/db-interfaces/types\";\nimport {gql} from \"apollo-boost\";\nimport {ISubscriptionRequest} from \"../components/User/AcceptSubscriptionsModal\";\n\nexport default client => ({\n    getById: {\n        request: async (id: entityId) => client.query({\n            query: gql`\n                query GetUserById($id: Int!) {\n                    getUserById(id: $id) {\n                        id\n                        name\n                    }\n                }\n            `,\n            variables: { id },\n            fetchPolicy: 'no-cache',\n        }),\n        response: res => res.data.getUserById,\n    },\n    updateName: {\n        request: async name => client.mutate({\n            mutation: gql`\n                mutation UpdateUserName($name: String!) {\n                    updateUserName(name: $name) {\n                        id\n                        name\n                    }\n                }\n            `,\n            variables: { name },\n        }),\n        response: res => res.data.updateUserName,\n    },\n    getAllNames: {\n        request: async () => client.query({\n           query: gql`\n                query GetAllNames {\n                    getAllNames\n                }\n           `,\n            fetchPolicy: 'no-cache',\n        }),\n        response: res => res.data.getAllNames,\n    },\n    getSubscriptionRequests: {\n        request: async () => client.query({\n            query: gql`\n                query GetSubscriptionRequests {\n                  getSubscriptionRequests {\n                    id\n                    userId\n                    userName\n                    habitatId\n                    habitatName\n                    status\n                  }\n                }\n            `,\n            fetchPolicy: 'no-cache',\n        }),\n        response: res => res.data.getSubscriptionRequests,\n    },\n    acceptSubscriptionRequest: {\n        request: async (subscriptionId: entityId) => client.mutate({\n            mutation: gql`\n                mutation AcceptHabitatSubscriptionRequest($subscriptionId: Int!) {\n                    acceptHabitatSubscriptionRequest(subscriptionId: $subscriptionId)\n                }\n            `,\n            variables: { subscriptionId },\n        }),\n        response: res => res.data.acceptHabitatSubscriptionRequest,\n    },\n    rejectSubscriptionRequest: {\n        request: async (subscriptionId: entityId) => client.mutate({\n            mutation: gql`\n                mutation RejectHabitatSubscriptionRequest($subscriptionId: Int!) {\n                    rejectHabitatSubscriptionRequest(subscriptionId: $subscriptionId)\n                }\n            `,\n            variables: { subscriptionId },\n        }),\n        response: res => res.data.acceptHabitatSubscriptionRequest,\n    },\n});","import { haveCorrectUser } from \"../../api\";\nimport {call, put, takeLatest} from \"@redux-saga/core/effects\";\nimport { setHaveCorrectUser } from \"./actions\";\nimport TYPES from './types';\n\nfunction* getHaveCorrectUser({ url }) {\n    const { data } = yield call(haveCorrectUser, url);\n    yield put(setHaveCorrectUser(data));\n}\n\nexport default [\n    // @ts-ignore\n  takeLatest(TYPES.GET_HAVE_USER_REQUESTED, getHaveCorrectUser),\n];","import { call, put, takeLatest } from 'redux-saga/effects';\nimport { apiHabitat } from '../../api';\nimport {createOneSucceeded, setHabitats, setQueriedHabitats} from \"./actions\";\nimport TYPES from \"./types\";\n\nfunction* fetchHabitatsByIds({ habitatIds }) {\n  const response = yield call(apiHabitat.getByIds.request, habitatIds);\n  yield put(setHabitats(apiHabitat.getByIds.response(response)));\n}\n\nfunction* fetchUserSubscribedHabitats({ userId, callback }) {\n  const response = yield call(apiHabitat.getUserSubscribed.request, userId);\n  const habitats = apiHabitat.getUserSubscribed.response(response);\n  yield put(setHabitats(habitats));\n  callback(habitats);\n}\n\nfunction* createOne({ habitat, callback }) {\n  const res = yield call(apiHabitat.createOne.request, habitat);\n  yield put(createOneSucceeded());\n  const created = apiHabitat.createOne.response(res);\n  callback(created);\n}\n\nfunction* searchHabitats({ name, callback }) {\n  const res = yield call(apiHabitat.nameSearch.request, name);\n  const found = apiHabitat.nameSearch.response(res);\n  yield put(setQueriedHabitats(found));\n  callback(found);\n}\n\nfunction* requestSubscription({ habitatId, callback }) {\n  console.log({habitatIdInSaga: habitatId});\n  yield call(apiHabitat.requestSubscription.request, habitatId);\n  callback();\n}\n\nexport default [\n  // @ts-ignore\n  takeLatest(TYPES.HABITATS_FETCH_BY_IDS_REQUESTED, fetchHabitatsByIds),\n  // @ts-ignore\n  takeLatest(TYPES.HABITATS_FETCH_USER_SUBSCRIBED_REQUESTED, fetchUserSubscribedHabitats),\n  // @ts-ignore\n  takeLatest(TYPES.HABITATS_CREATE_ONE_REQUESTED, createOne),\n  // @ts-ignore\n  takeLatest(TYPES.HABITATS_SEARCH_REQUESTED, searchHabitats),\n  // @ts-ignore\n  takeLatest(TYPES.HABITATS_REQUEST_SUBSCRIPTION_REQUESTED, requestSubscription),\n];\n","import {call, takeLatest} from \"@redux-saga/core/effects\";\nimport { apiPlant } from \"../../api\";\nimport TYPES from './types';\n\nfunction* waterByIds({ ids, callback = _ => undefined }) {\n  const response = yield call(apiPlant.waterByIds.request, ids);\n  callback(apiPlant.waterByIds.response(response));\n}\n\nfunction* createOne({ plant, callback = _ => undefined }) {\n  const response = yield call(apiPlant.createOne.request, plant);\n  callback(apiPlant.createOne.response(response));\n}\n\nfunction* updateOne({ plant, callback = _ => undefined }) {\n  const response = yield call(apiPlant.updateOne.request, plant);\n  callback(apiPlant.updateOne.response(response));\n}\n\nexport default [\n  // @ts-ignore\n  takeLatest(TYPES.PLANTS_WATER_BY_IDS_REQUESTED, waterByIds),\n  // @ts-ignore\n  takeLatest(TYPES.PLANTS_CREATE_ONE_REQUESTED, createOne),\n  // @ts-ignore\n  takeLatest(TYPES.PLANTS_UPDATE_ONE_REQUESTED, updateOne),\n];\n","enum types {\n  PLANTS_WATER_BY_IDS_REQUESTED = 'PLANTS/WATER_BY_IDS_REQUESTED',\n  PLANTS_CREATE_ONE_REQUESTED = 'PLANTS/CREATE_ONE_REQUESTED',\n  PLANTS_UPDATE_ONE_REQUESTED = 'PLANTS/UPDATE_ONE_REQUESTED',\n}\n\nexport default types;","import { all } from 'redux-saga/effects';\nimport habitatSagas from './habitat/sagas';\nimport plantSagas from './plant/sagas';\nimport userSagas from './user/sagas';\nimport authSagas from './auth/sagas';\n\n\nexport default function* rootSaga() {\n  // Promise.all([\n  //     import('./habitat/sagas'),\n  //     import('./plant/sagas'),\n  //     import('./user/sagas'),\n  //     import('./auth/sagas'),\n  // ]).then((a, b, c, d) => {\n  //   console.log({ a, b, c, d});\n  // });\n  yield all([...plantSagas, ...habitatSagas, ...userSagas, ...authSagas]);\n}\n","import {call, put, takeLatest} from \"@redux-saga/core/effects\";\nimport TYPES from \"./types\";\nimport { apiUser } from \"../../api\";\nimport {setAllNames, setUser, setSubscriptionRequests} from \"./actions\";\n\nfunction* fetchById({ id, callback }) {\n    const response = yield call(apiUser.getById.request, id);\n    const user = apiUser.getById.response(response);\n    yield put(setUser(user));\n    callback(user);\n}\n\nfunction* fetchAllNames() {\n    const response = yield call(apiUser.getAllNames.request);\n    const names = apiUser.getAllNames.response(response);\n    yield put(setAllNames(names));\n}\n\nfunction* updateName({ name, callback }) {\n    const response = yield call(apiUser.updateName.request, name);\n    const updatedUser = apiUser.updateName.response(response);\n    yield put(setUser(updatedUser));\n    callback(updatedUser);\n}\n\nfunction* fetchSubscriptionRequests({ callback }) {\n    const response = yield call(apiUser.getSubscriptionRequests.request);\n    const requests = apiUser.getSubscriptionRequests.response(response);\n    yield put(setSubscriptionRequests(requests));\n    callback(requests);\n}\n\nfunction* acceptSubscriptionRequest({ request, callback }) {\n    const response = yield call(apiUser.acceptSubscriptionRequest.request, request.id);\n    const resData = apiUser.acceptSubscriptionRequest.response(response);\n    callback(resData);\n}\n\nfunction* rejectSubscriptionRequest({ request, callback }) {\n    const response = yield call(apiUser.rejectSubscriptionRequest.request, request.id);\n    const resData = apiUser.rejectSubscriptionRequest.response(response);\n    callback(resData);\n}\n\n\nexport default [\n    // @ts-ignore\n    takeLatest(TYPES.USER_FETCH_BY_ID_REQUESTED, fetchById),\n    // @ts-ignore\n    takeLatest(TYPES.USER_FETCH_ALL_NAMES_REQUESTED, fetchAllNames),\n    // @ts-ignore\n    takeLatest(TYPES.USER_UPDATE_NAME_REQUESTED, updateName),\n    // @ts-ignore\n    takeLatest(TYPES.USER_FETCH_SUBSCRIPTION_REQUESTS_REQUESTED, fetchSubscriptionRequests),\n    // @ts-ignore\n    takeLatest(TYPES.USER_ACCEPT_SUBSCRIPTION_REQUEST_REQUESTED, acceptSubscriptionRequest),\n    // @ts-ignore\n    takeLatest(TYPES.USER_REJECT_SUBSCRIPTION_REQUEST_REQUESTED, rejectSubscriptionRequest),\n];\n"],"sourceRoot":""}